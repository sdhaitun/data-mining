<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

       <!-- 配置数据源-->
       <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
              <property name="url" value="jdbc:mysql://localhost:3306/test"/>
              <property name="username" value="root" />
              <property name="password" value="root" />
              <!-- 初始化连接大小 -->
              <property name="initialSize" value="0" />
              <!-- 连接池最大使用连接数量 -->
              <property name="maxActive" value="20" />
              <!-- 连接池最小空闲 -->
              <property name="minIdle" value="0" />
              <!-- 获取连接最大等待时间 -->
              <property name="maxWait" value="60000" />

              <!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

              <property name="validationQuery" value="select 1" />
              <property name="testOnBorrow" value="false" />
              <property name="testOnReturn" value="false" />
              <property name="testWhileIdle" value="true" />
              <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
              <property name="timeBetweenEvictionRunsMillis" value="60000" />
              <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
              <property name="minEvictableIdleTimeMillis" value="25200000" />
              <!-- 打开removeAbandoned功能 -->
              <property name="removeAbandoned" value="true" />
              <!-- 1800秒，也就是30分钟 -->
              <property name="removeAbandonedTimeout" value="1800" />
              <!-- 关闭abanded连接时输出错误日志 -->
              <property name="logAbandoned" value="true" />
              <!-- 监控数据库 -->
              <!-- <property name="filters" value="stat" /> -->
              <property name="filters" value="mergeStat" />
       </bean>
       <!--
       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
              <property name="driverClassName" value="com.mysql.jdbc.Driver">
              </property>
              <property name="url"
                        value="jdbc:mysql://localhost:3306/db">
              </property>
              <property name="username" value="root"></property>
              <property name="password" value="root"></property>
       </bean>
       -->

       <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
              <property name="dataSource" ref="dataSource" />
              <property name="packagesToScan" value="cn.wyh.dm.entity" />
              <property name="jpaVendorAdapter">
                     <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
              </property>
              <property name="jpaProperties">
                     <props>
                            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                            <!-- web项目启动时是否更新表结构 -->
                            <prop key="hibernate.hbm2ddl.auto">update</prop>
                            <!-- 系统使用的数据库方言，也就是使用的数据库类型 -->
                            <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                            <!-- 是否打印Hibernate生成的SQL到控制台 -->
                            <prop key="hibernate.show_sql">true</prop>
                            <!-- 是否格式化打印出来的SQL -->
                            <prop key="hibernate.format_sql">true</prop>
                     </props>
              </property>
       </bean>

       <!-- 配置事务管理器 -->
       <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
              <property name="entityManagerFactory" ref="entityManagerFactory" />
       </bean>


       <!-- 注解方式配置事物 -->
       <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

       <!-- 拦截器方式配置事务 -->
       <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <!-- 以如下关键字开头的方法使用事物 -->
                     <tx:method name="add*" />
                     <tx:method name="save*" />
                     <tx:method name="update*" />
                     <tx:method name="modify*" />
                     <tx:method name="edit*" />
                     <tx:method name="delete*" />
                     <tx:method name="remove*" />
                     <tx:method name="repair" />
                     <tx:method name="deleteAndRepair" />
                     <!-- 以如下关键字开头的方法不使用事物 -->
                     <tx:method name="get*" propagation="SUPPORTS" />
                     <tx:method name="find*" propagation="SUPPORTS" />
                     <tx:method name="load*" propagation="SUPPORTS" />
                     <tx:method name="search*" propagation="SUPPORTS" />
                     <tx:method name="datagrid*" propagation="SUPPORTS" />
                     <!-- 其他方法不使用事物 -->
                     <tx:method name="*" propagation="SUPPORTS" />
              </tx:attributes>
       </tx:advice>
       <!-- 切面，将事务用在哪些对象上 -->
       <aop:config>
              <aop:pointcut id="transactionPointcut" expression="execution(* cn.wyh.dm.service..*Impl.*(..))" />
              <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
       </aop:config>

       <jpa:repositories base-package="cn.wyh.dm.repository"
                         entity-manager-factory-ref="entityManagerFactory"
                         transaction-manager-ref="transactionManager"/>

</beans>